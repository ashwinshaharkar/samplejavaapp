pipeline {
    agent any
    stages {
        stage('Checkout to Target Folder') {
            steps {
                echo 'Checking out source code to /var/www/develop-branch'
                dir('/var/www/develop-branch') {
                    // Clean the directory first
                    deleteDir()
                    
                    // Checkout directly to the target folder
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: 'develop']],
                        extensions: [
                            [$class: 'RelativeTargetDirectory', relativeTargetDir: '.']
                        ],
                        userRemoteConfigs: [[
                            url: 'https://github.com/ashwinshaharkar/samplejavaapp.git'
                        ]]
                    ])
                    
                    // Verify checkout
                    sh 'ls -la'
                }
            }
        }
        
        stage('Maven Compile') {
            steps {
                echo 'Compiling source code...'
                dir('/var/www/develop-branch') {
                    sh 'mvn compile'
                }
            }
        }
        
        stage('PMD Analysis') {
            steps {
                echo 'Running PMD static code analysis...'
                dir('/var/www/develop-branch') {
                    sh 'mvn -P metrics pmd:pmd'
                }
            }
            post {
                always {
                    dir('/var/www/develop-branch') {
                        recordIssues(
                            tools: [pmd(pattern: 'target/pmd.xml')],
                            enabledForFailure: true
                        )
                    }
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                dir('/var/www/develop-branch') {
                    sh 'mvn test'
                }
            }
            post {
                always {
                    dir('/var/www/develop-branch') {
                        junit 'target/surefire-reports/*.xml'
                    }
                }
            }
        }
        
        stage('Verification') {
            steps {
                echo 'Running verification...'
                dir('/var/www/develop-branch') {
                    sh 'mvn verify'
                }
            }
            post {
                success {
                    dir('/var/www/develop-branch') {
                        jacoco(
                            buildOverBuild: true,
                            deltaBranchCoverage: '20',
                            deltaClassCoverage: '20',
                            deltaComplexityCoverage: '20',
                            deltaInstructionCoverage: '20',
                            deltaLineCoverage: '20',
                            deltaMethodCoverage: '20'
                        )
                    }
                }
            }
        }
        
        stage('Package') {
            steps {
                echo 'Building package...'
                dir('/var/www/develop-branch') {
                    sh 'mvn package'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'Deploying artifacts...'
                dir('/var/www/develop-branch') {
                    sh 'mkdir -p /var/www/deployment || true'
                    sh 'cp target/*.jar /var/www/deployment/'
                    sh 'ls -la /var/www/deployment/'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed - cleaning up'
            // Optional: Clean up workspace
            // cleanWs()
        }
        success {
            slackSend color: 'good', message: "Build Successful: ${env.JOB_NAME} ${env.BUILD_NUMBER}"
        }
        failure {
            slackSend color: 'danger', message: "Build Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}"
        }
    }
}